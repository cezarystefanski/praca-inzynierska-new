// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component common/ExampleBlock should not differ from earlier version 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ExampleBlockView
    css={[Function]}
    styles={
      Object {
        "container": Object {
          "_definition": Object {
            "backgroundColor": "#ccccff",
            "borderRadius": "15px",
            "marginTop": "30px",
            "padding": "25px 50px",
          },
          "_len": 92,
          "_name": "container_344hxm",
        },
        "heading": Object {
          "_definition": Object {
            "fontSize": "20px",
            "fontWeight": 700,
          },
          "_len": 36,
          "_name": "heading_1i3o6v",
        },
        "optionalParagraph": Object {
          "_definition": Object {
            "fontSize": "14px",
          },
          "_len": 19,
          "_name": "optionalParagraph_1b2af1e",
        },
      }
    }
    text="example text"
    theme={
      Object {
        "color": Object {
          "icyBlue": "#ccccff",
        },
        "font": Object {
          "sizes": Object {
            "big": "20px",
            "normal": "14px",
            "small": "8px",
          },
          "weights": Object {
            "bold": 700,
            "normal": 500,
          },
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="heading_1i3o6v"
        >
          This is an empty block
        </p>,
        <p
          className="optionalParagraph_1b2af1e"
        >
          example text
        </p>,
      ],
      "className": "container_344hxm",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "This is an empty block",
          "className": "heading_1i3o6v",
        },
        "ref": null,
        "rendered": "This is an empty block",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "example text",
          "className": "optionalParagraph_1b2af1e",
        },
        "ref": null,
        "rendered": "example text",
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="heading_1i3o6v"
          >
            This is an empty block
          </p>,
          <p
            className="optionalParagraph_1b2af1e"
          >
            example text
          </p>,
        ],
        "className": "container_344hxm",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "This is an empty block",
            "className": "heading_1i3o6v",
          },
          "ref": null,
          "rendered": "This is an empty block",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "example text",
            "className": "optionalParagraph_1b2af1e",
          },
          "ref": null,
          "rendered": "example text",
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
